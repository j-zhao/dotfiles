"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"     _    _____  _   _   ___  _ ___  __   _____ __  __ ___  ___
"  _ | |__|_  / || | /_\ / _ \( ) __| \ \ / /_ _|  \/  | _ \/ __|
" | || |___/ /| __ |/ _ \ (_) |/\__ \  \ V / | || |\/| |   / (__
"  \__/   /___|_||_/_/ \_\___/  |___/   \_/ |___|_|  |_|_|_\\___|
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Author: Jesse Zhao
" Repo: github.com/j-zhao/dotfiles
" Last Modified: January 2020
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim-plug, and Plugins {{{

"Initialize plugin system

" vim-plug init {{{
" checks to see if vim-plug is already installed, or install if not
if has('unix')
  if has('nvim')
    if empty(glob('$HOME/.local/share/nvim/site/autoload/plug.vim'))
      silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
  else
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
  endif
endif

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
if has('nvim')
  call plug#begin('~/.local/share/nvim/plugged')
elseif has('win32')
  call plug#begin('~/vimfiles/plugged')
else
  call plug#begin('~/.vim/plugged')
endif
" }}} /vim-plug init

" Plugins {{{

" Plug 'jistr/vim-nerdtree-tabs'
" Plug 'leafgarland/typescript-vim'
" Plug 'tpope/vim-obsession'
" Plug 'tpope/vim-surround'
" Plug 'valloric/YouCompleteMe'
" Plug 'ervandew/supertab'
" Plug 'vim-syntastic/syntastic'
" Plug 'altercation/vim-colors-solarized'
" Plug 'kien/rainbow_parentheses.vim'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
" Plug 'ap/vim-buftabline'
" Plug 'bling/vim-bufferline'
" Plug 'mtscout6/syntastic-local-eslint.vim'
" Plug 'tpope/vim-sleuth'
" Plug 'dense-analysis/ale'
" Plug 'drewtempelmeyer/palenight.vim

Plug 'airblade/vim-gitgutter'
Plug 'bazelbuild/vim-bazel'
Plug 'challenger-deep-theme/vim', { 'as': 'challenger-deep' }
Plug 'ciaranm/detectindent'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'direnv/direnv.vim'
Plug 'dzeban/vim-log-syntax'
Plug 'fatih/vim-go'
Plug 'google/vim-maktaba'
Plug 'itchyny/lightline.vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vista.vim'
Plug 'majutsushi/tagbar'
Plug 'moll/vim-bbye'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'pangloss/vim-javascript'
Plug 'plasticboy/vim-markdown'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'solarnz/thrift.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'udalov/kotlin-vim'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'zefei/vim-wintabs'
Plug 'zefei/vim-wintabs-powerline'

" }}} /Plugins

call plug#end()

" }}} /vim-plug, and Plugins

" Vim Customization {{{

"source $VIMRUNTIME/vimrc_example.vim
"source $VIMRUNTIME/mswin.vim
scriptencoding utf-8
set encoding=utf-8
set lazyredraw
set smartcase ignorecase
" set showmode
set number relativenumber
set linebreak
set mouse=a
set splitright
set splitbelow
" Tab and whitespace related
set softtabstop=2 shiftwidth=2 tabstop=2 expandtab
" set shiftwidth=4 softtabstop=4 expandtab
" set smarttab
set smartindent autoindent
" set autoindent
" set showbreak=\\
" set listchars=tab:>~,nbsp:_,trail:.,extends:>,precedes:<
if has('gui_running')
  set showbreak=↪\
  " set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨
  set listchars=tab:→\ ,nbsp:␣,trail:•,extends:⟩,precedes:⟨
else
  set t_Co=256
  set listchars=tab:>~,nbsp:_,trail:.,extends:>,precedes:<
endif
set list
set colorcolumn=121
set showcmd
if !exists("g:syntax_on")
  syntax enable
endif
set background=dark
colorscheme challenger_deep

" }}} /Vim Customization

" Functions and AutoCommands {{{

augroup autocmds
  autocmd!
  " reload_vimrc
  autocmd BufWritePost init.vim,vimrc,.vimrc
              \ echo "Reloading vimrc..." |
              \ source $MYVIMRC |
              \ echo "Reloaded vimrc!" |
augroup END

" }}} /Functions and AutoCommands

" Environment Configs {{{

if has('nvim')
  set rtp+=/usr/share/vim/vim74
else
endif

if has('nvim') || has('termguicolors')
  set termguicolors
else
  " set guioptions=0
endif

" Clipboard/Copy Paste stuff
set clipboard^=unnamed,unnamedplus
imap <C-V> <C-R>+
vmap <C-C> y
cmap<C-V> <C-R>+

if has('win32')
  " Startup directory
  " cd D:\Projects
  set enc=utf-8
  behave mswin
  set directory^=$HOME/swaps
  " DirectX
  if !has('nvim')
    set renderoptions=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
  endif
  " set guifont=Consolas:h11
  set guifont=FuraCode\ Nerd\ Font\ Mono\ Retina:h11,Fira\ Code:h11,Consolas:h11
  " set guifont=Fira\ Code:h11
else
  " Startup directory
  set t_BE=
  " cd ~/Projects
  set directory^=$HOME/.vim/swaps//
  " nmap <C-a> ggVG$
  " map <C-c> "+y
  " map <C-v> "+p
  " set guifont=Fira\ Code:h11
  set guifont=FuraCode\ Nerd\ Font\ Mono\ Retina:h12,FuraCode\ Nerd\ Font\ Mono:h12,Fira\ Code\ Retina:h12,Fira\ Code:h12
  filetype plugin indent on
  set shell=/bin/zsh
  if has("gui_macvim") || has("macunix")
    " set guifont=Menlo:h12
    " set macligatures
  endif
endif

" }}} / Environment Configs

" Mappings {{{

" Closes braces automatically
" inoremap (  ()<Left>
" inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"
" inoremap [  []<Left>
" inoremap <expr> ]  strpart(getline('.'), col('.')-1, 1) == "]" ? "\<Right>" : "]"
" inoremap <  <><Left>
" inoremap <expr> >  strpart(getline('.'), col('.')-1, 1) == ">" ? "\<Right>" : ">"
" inoremap {  {}<Left>
" inoremap <expr> }  strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"
" inoremap <expr> <CR> strpart(getline('.'), col('.')-1, 1) == '}' ? '<CR><CR><Up><Tab>' : '<CR>'
" "    inoremap '  ''<Left>
" "    inoremap <expr> ' strpart(getline('.'), col('.')-1, 1) == '\'' ? '\<Right>' : '\'\'\<Left>'
" inoremap "  ""<Left>
" inoremap <expr> " strpart(getline('.'), col('.')-1, 1) == "\"" ? "\<Right>" : "\"\"\<Left>"

" Save/Open Sessions
"map <F2> :Obsess ~/Obsession.vim
"map <F3> :source ~/Obsession.vim
" Quick write session with F2
"map <F2> :mksession! ~/.vim/Session.vim
"map <F3> :source ~/.vim/Session.vim
map <F2> :SaveSession
map <F3> :OpenSession
map <F4> :call OpenVimrcs()

" }}} /Mappings

" Plugin Settings and Cosmetics {{{

" Rainbow Parens {{{
" Rainbow Parens Always on
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces
" }}}

" NERDTree {{{
map <C-n> :NERDTreeToggle<CR>
map <Leader>nt :NERDTreeToggle<CR>
map <Leader>nf :NERDTreeFind<CR>
" enable line numbers
let NERDTreeShowLineNumbers=1
" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber
" Automatically refresh NERDTree when buffer is written
" autocmd BufWritePost * NERDTreeFocus | execute 'normal R' | wincmd p
" Close NERDTree if last buffer
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1
let g:NERDTreeShowGitStatus = 1
let g:NERDTreeHighlightFoldersFullName = 1
" Open NERDTree automatically when vim starts up on opening a directory
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" }}} /NERDTree

" DetectIndent {{{
let g:detectindent_preferred_indent = 2
autocmd BufReadPost * :DetectIndent
" }}} /DetectIndent

" Indent Guides {{{
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size=1
" }}} /Indent Guides

" Syntastic {{{
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exe = 'npm run lint --'
" }}}

" Solarized {{{
" let g:solarized_termtrans=1
" let g:solarized_termcolors=256
" let g:solarized_contrast='high'
" }}} /Solarized

" Vim-Session {{{
let g:session_autosave='yes'
let g:session_autoload='no'
let g:session_autosave_periodic=1
" }}} /Vim-Session

" GitGutter {{{
" set updatetime=250
" }}}

" vim-airline {{{
" let g:airline_detect_modified=1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = '|'
" let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" }}} /vim-airline

" vim-airline-themes {{{
" let g:airline_theme='angr'
" let g:airline_theme='solarized'
" let g:airline_solarized_bg='dark'
" let g:airline_powerline_fonts = 1
" }}}

" vim-bufferline {{{
" let g:bufferline_echo = 0
" let g:bufferline_active_buffer_left = '['
" let g:bufferline_active_buffer_right = ']'
" }}} /vim-bufferline

" NERDCommenter {{{
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1
" }}} /NERDCommenter

" vim-go {{{
if $MONOREPO_GOPATH_MODE == 1
  " let $USE_SYSTEM_GO=1
  echom "Working in monorepo."
  " let $GO111MODULE="on"
  " let $GOPROXY="goproxy.uberinternal.com"
  " if $GO_BIN_PATH != ""
    " let g:go_bin_path=$GO_BIN_PATH
    " let g:go_bin_path='$HOME/Projects/Uber/go-code/bin'
  " endif
endif
let g:go_auto_sameids=0
" let g:go_auto_sameids = 1
" let g:go_bin_path=expand('$GOPATH/bin')
let g:go_gopls_complete_unimported = 1
let g:go_autodetect_gopath = 0
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
" " Run gofmt on save
" autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
" let g:go_debug=["lsp", "shell-commands"]
let g:go_debug=['shell-command']
let g:go_doc_popup_window = 1
let g:go_doc_keywordprg_enabled = 0
let g:go_fmt_command = "goimports"
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_deadline = "5s"
let g:go_test_show_name = 1
let g:go_auto_type_info = 1
" Performance related configs
" g:go_fold_enable = 0
" highlights
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
" let g:go_highlight_generate_tags = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
" }}}

" fzf {{{
set rtp+=/usr/local/opt/fzf
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" Let FZF display in popup window
fu s:snr() abort
    return matchstr(expand('<sfile>'), '.*\zs<SNR>\d\+_')
endfu
let s:snr = get(s:, 'snr', s:snr())
let g:fzf_layout = {'window': 'call '..s:snr..'fzf_window(0.9, 0.6, "Comment")'}

fu s:fzf_window(width, height, border_highlight) abort
    let width = float2nr(&columns * a:width)
    let height = float2nr(&lines * a:height)
    let row = float2nr((&lines - height) / 2)
    let col = float2nr((&columns - width) / 2)
    let top = '┌' . repeat('─', width - 2) . '┐'
    let mid = '│' . repeat(' ', width - 2) . '│'
    let bot = '└' . repeat('─', width - 2) . '┘'
    let border = [top] + repeat([mid], height - 2) + [bot]
    if has('nvim')
        let frame = s:create_float(a:border_highlight, {
            \ 'row': row,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height,
            \ })
        call nvim_buf_set_lines(frame, 0, -1, v:true, border)
        call s:create_float('Normal', {
            \ 'row': row + 1,
            \ 'col': col + 2,
            \ 'width': width - 4,
            \ 'height': height - 2,
            \ })
        exe 'au BufWipeout <buffer> bw '..frame
    else
        let frame = s:create_popup_window(a:border_highlight, {
            \ 'line': row,
            \ 'col': col,
            \ 'width': width,
            \ 'height': height,
            \ 'is_frame': 1,
            \ })
        call setbufline(frame, 1, border)
        call s:create_popup_window('Normal', {
            \ 'line': row + 1,
            \ 'col': col + 2,
            \ 'width': width - 4,
            \ 'height': height - 2,
            \ })
    endif
endfu

fu s:create_float(hl, opts) abort
    let buf = nvim_create_buf(v:false, v:true)
    let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
    let win = nvim_open_win(buf, v:true, opts)
    call setwinvar(win, '&winhighlight', 'NormalFloat:'..a:hl)
    return buf
endfu

fu s:create_popup_window(hl, opts) abort
    if has_key(a:opts, 'is_frame')
        let id = popup_create('', #{
            \ line: a:opts.line,
            \ col: a:opts.col,
            \ minwidth: a:opts.width,
            \ minheight: a:opts.height,
            \ zindex: 50,
            \ })
        call setwinvar(id, '&wincolor', a:hl)
        exe 'au BufWipeout * ++once call popup_close('..id..')'
        return winbufnr(id)
    else
        let buf = term_start(&shell, #{hidden: 1})
        call popup_create(buf, #{
            \ line: a:opts.line,
            \ col: a:opts.col,
            \ minwidth: a:opts.width,
            \ minheight: a:opts.height,
            \ zindex: 51,
            \ })
        exe 'au BufWipeout * ++once bw! '..buf
    endif
endfu
" }}} /fzf

" Vista {{{
nmap <Leader>t :Vista!!<CR>
let g:vista#executives = ['coc', 'ctags']
let g:vista_default_executive = 'coc'
let g:vista_finder_alternative_executives = ['coc']
" How each level is indented and what to prepend.
" This could make the display more compact or more spacious.
" e.g., more compact: ["▸ ", ""]
" Note: this option only works the LSP executives, doesn't work for `:Vista ctags`.
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]

" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
let g:vista_default_executive = 'ctags'

" To enable fzf's preview window set g:vista_fzf_preview.
" The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
" For example:
let g:vista_fzf_preview = ['right:50%']
" Ensure you have installed some decent font to show these pretty symbols, then you can enable icon for the kind.
let g:vista#renderer#enable_icon = 1

" The default icons can't be suitable for all the filetypes, you can extend it as you wish.
let g:vista#renderer#icons = {
      \   "function": "\uf794",
      \   "variable": "\uf71b",
      \  }
" }}}

" vim-markdown {{{
let g:vim_markdown_folding_disabled = 1
" }}} /vim-markdown

" coc.nvim {{{
let $NVIM_COC_LOG_LEVEL = 'debug'
let g:coc_global_extensions = [
      \ 'coc-java',
      \ 'coc-vimlsp',
      \ 'coc-eslint',
      \ 'coc-git',
      \ 'coc-json',
      \ 'coc-yaml',
      \ 'coc-highlight',
      \ 'coc-xml',
      \ 'coc-lists',
      \ 'coc-prettier',
      \ 'coc-tsserver',
      \ 'coc-python'
      \ ]
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
" inoremap <silent><expr> <C-@> coc#refresh()
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup cocnvimgroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocActionAsync('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  " autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.

xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocActionAsync('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, ' '). ' ' . get(g:, 'coc_status', '')
endfunction

" }}} /Coc.nvim

" Statusline {{{
" set laststatus=2            " always statusbar
" set statusline=%{getcwd()}: " pwd of vim
" set statusline+=\ %f%m%=    " relative path to filename, modified flag, RHS
" set statusline+=%c,         " char number
" set statusline+=%l/%L\ %y   " curr line/total line [filetype]
" set statusline+=%{fugitive#statusline()} " show current git branch with fugitive
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%{ObsessionStatus('Obsessed','!Obsessed')}
" set statusline+=%*
" }}}

" lightline.vim {{{
let g:lightline = {
      \ 'colorscheme': 'challenger_deep',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'gitbranch','filename', 'modified', 'cocstatus', 'currentfunction', 'statusdiagnostic' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'cocstatus': 'coc#status',
      \   'currentfunction': 'CocCurrentFunction',
      \   'gitbranch': 'fugitive#head',
      \   'statusdiagnostic': 'StatusDiagnostic'
      \ },
      \ }
let g:lightline.enable = {
      \ 'statusline': 1,
      \ 'tabline': 0
      \ }
function! LightlineFilename()
  return expand('%')
endfunction
" let g:lightline = {
"       \ 'colorscheme': 'challenger_deep',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste' ],
"       \             [ 'readonly', 'filename', 'modified', 'helloworld' ] ],
"       \   'right': [ [ 'lineinfo' ],
"       \              [ 'percent' ],
"       \              [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ] ],
"       \ },
"       \ }
" let g:lightline = {
"       \ 'separator': { 'left': '>', 'right': '<' },
"       \ 'subseparator': { 'left': '>', 'right': '<' }
"       \ }
" }}} /lightline.vim

" ale {{{
let b:ale_fixers = {'javascript': ['prettier', 'eslint']}
" " Set this variable to 1 to fix files when you save them.
" let g:ale_fix_on_save = 1
" }}} /ale

" vim-devicons {{{
let g:WebDevIconsUnicodeDecorateFolderNodes = 1 " enable folder glyph flag
let g:DevIconsEnableFoldersOpenClose = 1
" let g:DevIconsEnableFolderExtensionPatternMatching = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
" let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ' '
" let g:DevIconsDefaultFolderOpenSymbol = ' '
" }}}

" vim-bbye {{{
nnoremap <Leader>q :Bdelete<CR>
" }}} /vim-bbye

" vim-wintabs {{{
" Mappings
map <C-H> <Plug>(wintabs_previous)
map <C-L> <Plug>(wintabs_next)
map <C-T>c <Plug>(wintabs_close)
map <C-T>u <Plug>(wintabs_undo)
map <C-T>o <Plug>(wintabs_only)
map <C-W>c <Plug>(wintabs_close_window)
map <C-W>o <Plug>(wintabs_only_window)
command! Tabc WintabsCloseVimtab
command! Tabo WintabsOnlyVimtab
let g:wintabs_ui_buffer_name_format=" %n|%t"
let g:wintabs_autoclose = 0
" " Left pointing arrow, used as previous buffers indicator.
" let g:wintabs_powerline_arrow_left = " \u25c0 "
" " Right pointing arrow, used as next buffers indicator.
" let g:wintabs_powerline_arrow_right = " \u25b6 "
" " Separator between inactive and active buffers.
" let g:wintabs_powerline_sep_buffer_transition = "\ue0b0"
" " Separator between inactive buffers.
" let g:wintabs_powerline_sep_buffer = "\ue0b1"
" " Separator between inactive and active vimtabs.
" let g:wintabs_powerline_sep_tab_transition = "\ue0b2"
" " Separator between inactive vimtabs.
" let g:wintabs_powerline_sep_tab = "\ue0b3"
" " Highlight group for background.
" highlight link WintabsEmpty TabLineFill
" " Highlight group for active buffer/tab.
" highlight link WintabsActive TabLineSel
" " Highlight group for inactive buffer/tab.
" highlight link WintabsInactive TabLine
" " Highlight group for arrows.
" highlight link WintabsArrow TabLine
" " Highlight group for active buffer/tab in not-current windows.
" highlight link WintabsActiveNC TabLine
" " Highlight group for inactive buffer/tab in not-current windows.
" highlight link WintabsInactiveNC TabLine
" }}} /vim-wintabs

" }}} /Plugin Settings and Cosmestics

" Developer Settings {{{

set autowrite

" Smooth Scrolling
" function SmoothScroll(up)
"     if a:up
"         let scrollaction="\"
"     else
"         let scrollaction="\"
"     endif
"     exec "norm " . scrollaction
"     redraw
"     let counter=1
"     while counter<&scroll
"         let counter+=1
"         sleep 10m
"         redraw
"         exec "norm " . scrollaction
"     endwhile
" endfunction
" nnoremap  :call SmoothScroll(1)
" nnoremap  :call SmoothScroll(0)
" inoremap  :call SmoothScroll(1)i
" inoremap  :call SmoothScroll(0)i

set errorformat=%A:%f:%l:\ %m,%-Z%p^,%-C%.%#

" If two files are loaded, switch to the alternate file, then back.
" That sets # (the alternate file).
if argc() == 2
  n
  e #
endif

" }}} /Developer Settings

" Cosmetics {{{

"Highlight over 80 characters
"highlight OverLength ctermbg=red ctermfg=white guibg=#592929
"match OverLength /\%81v.\+/

" if persistent_undo, configure a directory for it
if has("persistent_undo")
  set undodir=$HOME/.vim/.undodir//
  set undofile
endif

" always show tabline (2) or only show when multiple (1)
" Show tab numbers
set showtabline=2
" always show tabs in gvim, but not vim
" set up tab labels with tab number, buffer name, number of windows
" function! GuiTabLabel()
"   let label = ''
"   let bufnrlist = tabpagebuflist(v:lnum)
"   " Add '+' if one of the buffers in the tab page is modified
"   for bufnr in bufnrlist
"     if getbufvar(bufnr, "&modified")
"       let label = '+'
"       break
"     endif
"   endfor
"   " Append the tab number
"   let label .= v:lnum.': '
"   " Append the buffer name
"   let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
"   if name == ''
"     " give a name to no-name documents
"     if &buftype=='quickfix'
"       let name = '[Quickfix List]'
"     else
"       let name = '[No Name]'
"     endif
"   else
"     " get only the file name
"     let name = fnamemodify(name,":t")
"   endif
"   let label .= name
"   " Append the number of windows in the tab page
"   let wincount = tabpagewinnr(v:lnum, '$')
"   return label . '  [' . wincount . ']'
" endfunction
" set guitablabel=%{GuiTabLabel()}
" 
" " Tooltip to show multiple windows in a tab
" " set up tab tooltips with every buffer name
" function! GuiTabToolTip()
"   let tip = ''
"   let bufnrlist = tabpagebuflist(v:lnum)
"   for bufnr in bufnrlist
"     " separate buffer entries
"     if tip!=''
"       let tip .= " \n "
"     endif
"     " Add name of buffer
"     let name=bufname(bufnr)
"     if name == ''
"       " give a name to no name documents
"       if getbufvar(bufnr,'&buftype')=='quickfix'
"         let name = '[Quickfix List]'
"       else
"         let name = '[No Name]'
"       endif
"     endif
"     let tip.=name
"     " add modified/modifiable flags
"     if getbufvar(bufnr, "&modified")
"       let tip .= ' [+]'
"     endif
"     if getbufvar(bufnr, "&modifiable")==0
"       let tip .= ' [-]'
"     endif
"   endfor
"   return tip
" endfunction
" set guitabtooltip=%{GuiTabToolTip()}
" 
" set diffexpr=MyDiff()
" function! MyDiff()
"   let opt = '-a --binary '
"   if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
"   if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
"   let arg1 = v:fname_in
"   if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
"   let arg2 = v:fname_new
"   if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
"   let arg3 = v:fname_out
"   if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
"   let eq = ''
"   if $VIMRUNTIME =~ ' '
"     if &sh =~ '\<cmd'
"       let cmd = '""' . $VIMRUNTIME . '\diff"'
"       let eq = '"'
"     else
"       let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
"     endif
"   else
"     let cmd = $VIMRUNTIME . '\diff'
"   endif
"   silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
" endfunction

" }}} /Cosmetic

" Modeline and Notes {{{
" vim: set foldmethod=marker foldlevel=0 et :
" }}}

