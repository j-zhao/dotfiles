"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"     _    _____  _   _   ___  _ ___  __   _____ __  __ ___  ___
"  _ | |__|_  / || | /_\ / _ \( ) __| \ \ / /_ _|  \/  | _ \/ __|
" | || |___/ /| __ |/ _ \ (_) |/\__ \  \ V / | || |\/| |   / (__
"  \__/   /___|_||_/_/ \_\___/  |___/   \_/ |___|_|  |_|_|_\\___|
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Author: Jesse Zhao
" Repo: github.com/j-zhao/dotfiles
" Last Modified: September 2019
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vim-plug, and Plugins {{{
    " Initialize plugin system
    " vim-plug init {{{
        " checks to see if vim-plug is already installed, or install if not
        if has('unix')
            if empty(glob('~/.vim/autoload/plug.vim'))
                silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
                autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
            endif
        endif

        " Specify a directory for plugins
        " - For Neovim: ~/.local/share/nvim/plugged
        " - Avoid using standard Vim directory names like 'plugin'
        if has('nvim')
            call plug#being('~/.local/share/nvim/plugged')
        elseif has('win32')
            call plug#begin('~/vimfiles/plugged')
        else
            call plug#begin('~/.vim/plugged')
        endif
    " }}} /vim-plug init

    " Plugins {{{

        " Plug 'jistr/vim-nerdtree-tabs'
        " Plug 'leafgarland/typescript-vim'
        " Plug 'tpope/vim-obsession'
        " Plug 'tpope/vim-surround'
        " Plug 'ciaranm/detectindent'
        " Plug 'liuchengxu/vista.vim'
        " Plug 'valloric/YouCompleteMe'
        " Plug 'ervandew/supertab'

        Plug 'airblade/vim-gitgutter'
        Plug 'altercation/vim-colors-solarized'
        Plug 'bazelbuild/vim-bazel'
        Plug 'ctrlpvim/ctrlp.vim'
        Plug 'dzeban/vim-log-syntax'
        Plug 'fatih/vim-go'
        Plug 'google/vim-maktaba'
        Plug 'jeffkreeftmeijer/vim-numbertoggle'
        Plug 'kien/rainbow_parentheses.vim'
        Plug 'majutsushi/tagbar'
        Plug 'mtscout6/syntastic-local-eslint.vim'
        Plug 'nathanaelkane/vim-indent-guides'
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        Plug 'pangloss/vim-javascript'
        Plug 'plasticboy/vim-markdown'
        Plug 'scrooloose/nerdcommenter'
        Plug 'scrooloose/nerdtree'
        Plug 'solarnz/thrift.vim'
        Plug 'tpope/vim-sleuth'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-sensible'
        Plug 'udalov/kotlin-vim'
        Plug 'vim-airline/vim-airline'
        Plug 'vim-airline/vim-airline-themes'
        Plug 'vim-syntastic/syntastic'
        Plug 'xolox/vim-misc'
        Plug 'xolox/vim-session'
        Plug 'xuyuanp/nerdtree-git-plugin'

    " }}} /Plugins

    " Coc Plugins {{{

        Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-tsserver', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-css', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-java', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-highlight', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-lists', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-git', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-yank', {'do': 'yarn install --frozen-lockfile'}
        Plug 'iamcco/coc-vimlsp', {'do': 'yarn install --frozen-lockfile'}
        Plug 'fannheyward/coc-xml', {'do': 'yarn install --frozen-lockfile'}
        Plug 'neoclide/coc-eslint', {'do': 'yarn install --frozen-lockfile'}

    " }}} /Coc Plugins

    call plug#end()
" }}} /vim-plug, and Plugins
" Vim Customization {{{
    "source $VIMRUNTIME/vimrc_example.vim
    "source $VIMRUNTIME/mswin.vim
    scriptencoding utf-8
    set lazyredraw
    " set showmode
    set encoding=utf-8
    set number relativenumber
    set linebreak
    set mouse=a
    set splitright
    set splitbelow
    " Handled 
    " set softtabstop=4 shiftwidth=4 tabstop=4 expandtab
    " set smarttab
    " set smartindent
    set autoindent
    set tabstop=4
    " set showbreak=\\
    " set listchars=tab:>~,nbsp:_,trail:.,extends:>,precedes:<
    if has('gui_running')
        set showbreak=↪\
        " set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨
        set listchars=tab:→\ ,nbsp:␣,trail:•,extends:⟩,precedes:⟨
    else
        set listchars=tab:>~,nbsp:_,trail:.,extends:>,precedes:<
    endif
    set list
    set colorcolumn=121
    set showcmd
    if !exists("g:syntax_on")
        syntax enable
    endif
    set background=dark
    colorscheme solarized
" }}} /Vim Customization
" Functions and AutoCommands {{{

    augroup reload_vimrc
        autocmd!
        autocmd BufWritePost $MYVIMRC source $MYVIMRC
    augroup END

    function! OpenVimrcs()
        tabnew $MYVIMRC
    endfunction

" }}} /Functions and AutoCommands
" Environment Configs {{{

    if has('nvim')
        set rtp+=/usr/share/vim/vim74
    else
    endif

  " Clipboard/Copy Paste stuff

    set clipboard^=unnamed,unnamedplus
    imap <C-V> <C-R>+
    vmap <C-C> y
    cmap<C-V> <C-R>+

    if has('gui_running')
    endif

    if has('win32')
        " Startup directory
        cd D:\Projects
        set enc=utf-8
        behave mswin
        set directory^=$HOME/swaps
    " DirectX
    if !has('nvim')
        set renderoptions=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
    endif
        " set guifont=Consolas:h11
        set guifont=Fira\ Code:h11,Consolas:h11
    else
        let s:uname = system('uname')
        " Startup directory
        set t_BE=
        cd ~/Projects
        set directory^=$HOME/.vim/swaps//
        " nmap <C-a> ggVG$
        " map <C-c> "+y
        " map <C-v> "+p
        set guifont=Fira\ Code\ Retina:h12,Fira\ Code:h12
        set shell=/bin/sh
        if s:uname == 'Darwin\n'
            " set guifont=Menlo:h12
            set macligatures
        endif
    endif

    set t_Co=256

" }}} / Environment Configs
" Mappings {{{

" Closes braces automatically
inoremap (  ()<Left>
inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"
inoremap [  []<Left>
inoremap <expr> ]  strpart(getline('.'), col('.')-1, 1) == "]" ? "\<Right>" : "]"
inoremap <  <><Left>
inoremap <expr> >  strpart(getline('.'), col('.')-1, 1) == ">" ? "\<Right>" : ">"
inoremap {  {}<Left>
inoremap <expr> }  strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"
inoremap <expr> <CR> strpart(getline('.'), col('.')-1, 1) == '}' ? '<CR><CR><Up><Tab>' : '<CR>'
"    inoremap '  ''<Left>
"    inoremap <expr> ' strpart(getline('.'), col('.')-1, 1) == '\'' ? '\<Right>' : '\'\'\<Left>'
inoremap "  ""<Left>
inoremap <expr> " strpart(getline('.'), col('.')-1, 1) == "\"" ? "\<Right>" : "\"\"\<Left>"

" Save/Open Sessions
"map <F2> :Obsess ~/Obsession.vim
"map <F3> :source ~/Obsession.vim
" Quick write session with F2
"map <F2> :mksession! ~/.vim/Session.vim
"map <F3> :source ~/.vim/Session.vim
map <F2> :SaveSession
map <F3> :OpenSession
map <F4> :call OpenVimrcs()
" }}}
" Plugin Settings and Cosmetics {{{

" Rainbow Parens Always on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" NERDTree/NERDTreeTabs
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" map <C-n> :NERDTreeTabsToggle<CR>
" map <C-n> :NERDTreeToggle<CR>
map <C-n> :NERDTreeToggle<CR>
map <Leader>nt :NERDTreeToggle<CR>
map <Leader>nf :NERDTreeFind<CR>
" enable line numbers
let NERDTreeShowLineNumbers=1
" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber
" autocmd BufWritePost * NERDTreeFocus | execute 'normal R' | wincmd p
" Close NERDTree if last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks=1
let g:NERDTreeShowGitStatus = 1
" let g:nerdtree_tabs_open_on_console_startup=0
" let g:nerdtree_tabs_open_on_gui_startup=0
" let g:nerdtree_tabs_synchronize_focus=1
" let g:nerdtree_tabs_focus_on_files=1
" let g:nerdtree_tabs_autofind=1
" let g:nerdtree_tabs_synchronize_view=0

" Indent Guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size=1

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'npm run lint --'

" Solarized
let g:solarized_termtrans=1
"    let g:solarized_termcolors=256
"    let g:solarized_contrast='high'

" Vim-Session
let g:session_autosave='yes'

" GitGutter
set updatetime=250

" DetectIndent
" let g:detectindent_preferred_indent = 4
" autocmd BufReadPost * :DetectIndent

" Cosmetics
" Statusline
set laststatus=2            " always statusbar
"set statusline=%{getcwd()}: " pwd of vim
"set statusline+=\ %f%m%=    " relative path to filename, modified flag, RHS
"set statusline+=%c,         " char number
"set statusline+=%l/%L\ %y   " curr line/total line [filetype]
"set statusline+=%{fugitive#statusline()} " show current git branch with fugitive
"set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%{ObsessionStatus('Obsessed','!Obsessed')}
"set statusline+=%*

" Airline
let g:airline_detect_modified=1

" Airline Theme
let g:airline_solarized_bg='dark'
let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'

" NERDCommenter
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1

" vim-go
let g:go_autodetect_gopath = 0
let $USE_SYSTEM_GO=1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
" Launch gopls when Go files are in use
" let g:LanguageClient_serverCommands = {
"        \ 'go': ['gopls']
"        \ }
" " Run gofmt on save
" autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
let g:go_fmt_options = "-tabs=false -tabwidth=4"
let g:go_fmt_command = "goimports"
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_deadline = "5s"
let g:go_test_show_name = 1
let g:go_auto_type_info = 1
" highlights
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1

" Tagbar
nmap <Leader>t :TagbarToggle<CR>

" vim-markdown
let g:vim_markdown_folding_disabled = 1

" Coc.nvim {{{
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.

xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" }}} /Coc.nvim

" }}} /Plugin Settings and Cosmestics
" Developer Settings {{{

    set autowrite

    " Smooth Scrolling
    " function SmoothScroll(up)
    "     if a:up
    "         let scrollaction="\"
    "     else
    "         let scrollaction="\"
    "     endif
    "     exec "norm " . scrollaction
    "     redraw
    "     let counter=1
    "     while counter<&scroll
    "         let counter+=1
    "         sleep 10m
    "         redraw
    "         exec "norm " . scrollaction
    "     endwhile
    " endfunction
    " nnoremap  :call SmoothScroll(1)
    " nnoremap  :call SmoothScroll(0)
    " inoremap  :call SmoothScroll(1)i
    " inoremap  :call SmoothScroll(0)i

    set errorformat=%A:%f:%l:\ %m,%-Z%p^,%-C%.%#

    " If two files are loaded, switch to the alternate file, then back.
    " That sets # (the alternate file).
    if argc() == 2
        n
        e #
    endif

" }}} /Developer Settings
" Cosmetic {{{

    " Syntax Highlighting {{{

        " autocmd BufNewFile,BufRead *.ion  set syntax=java
    " }}} /Syntax Highlighting

    "Highlight over 80 characters
    "highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    "match OverLength /\%81v.\+/

    " if persistent_undo, configure a directory for it
    if has("persistent_undo")
        set undodir=$HOME/.undodir/
        set undofile
    endif

    " always show tabline (2) or only show when multiple (1)
    " Show tab numbers
    set showtabline=2
    " always show tabs in gvim, but not vim
    " set up tab labels with tab number, buffer name, number of windows
    function! GuiTabLabel()
        let label = ''
        let bufnrlist = tabpagebuflist(v:lnum)
        " Add '+' if one of the buffers in the tab page is modified
        for bufnr in bufnrlist
            if getbufvar(bufnr, "&modified")
                let label = '+'
                break
            endif
        endfor
        " Append the tab number
        let label .= v:lnum.': '
        " Append the buffer name
        let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
        if name == ''
            " give a name to no-name documents
            if &buftype=='quickfix'
                let name = '[Quickfix List]'
            else
                let name = '[No Name]'
            endif
        else
            " get only the file name
            let name = fnamemodify(name,":t")
        endif
        let label .= name
        " Append the number of windows in the tab page
        let wincount = tabpagewinnr(v:lnum, '$')
        return label . '  [' . wincount . ']'
    endfunction
    set guitablabel=%{GuiTabLabel()}

    " Tooltip to show multiple windows in a tab
    " set up tab tooltips with every buffer name
    function! GuiTabToolTip()
        let tip = ''
        let bufnrlist = tabpagebuflist(v:lnum)
        for bufnr in bufnrlist
            " separate buffer entries
            if tip!=''
                let tip .= " \n "
            endif
            " Add name of buffer
            let name=bufname(bufnr)
            if name == ''
                " give a name to no name documents
                if getbufvar(bufnr,'&buftype')=='quickfix'
                    let name = '[Quickfix List]'
                else
                    let name = '[No Name]'
                endif
            endif
            let tip.=name
            " add modified/modifiable flags
            if getbufvar(bufnr, "&modified")
                let tip .= ' [+]'
            endif
            if getbufvar(bufnr, "&modifiable")==0
                let tip .= ' [-]'
            endif
        endfor
        return tip
    endfunction
    set guitabtooltip=%{GuiTabToolTip()}

    set diffexpr=MyDiff()
    function! MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
            if &sh =~ '\<cmd'
                let cmd = '""' . $VIMRUNTIME . '\diff"'
                let eq = '"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction

" }}} /Cosmetic
" Modeline and Notes {{{
    " vim: set foldmethod=marker foldlevel=0 et :
" }}}

